{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","localValue","String","localStorage","getItem","localData","JSON","parse","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","setTodos","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","ToDoList","value","stringify","setItem","useRecoilState","setCategory","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.a9437899.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  // 사용자가 현재 지정한 category\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nlet localValue = String(localStorage.getItem(\"toDo\"));\nlet localData = JSON.parse(localValue);\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: localData === null ? [] : localData,\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    // 현재 지정한 category와 같은 항목만 보이도록\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nconst CreateToDo = () => {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const onValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(onValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n};\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nconst ToDo = ({ text, category, id }: IToDo) => {\n  const setTodos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setTodos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  const onDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setTodos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n      <button onClick={onDelete}>❌</button>\n    </li>\n  );\n};\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector, toDoState } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  // localStorage 저장\n  const value = useRecoilValue(toDoState);\n  const localValue = JSON.stringify(value);\n  localStorage.setItem(\"toDo\", localValue);\n\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n*{\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n}\na{\n\ttext-decoration: none;\n\tcolor: inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#8e44ad\",\n  cardBgColor: \"#2f3640\",\n};\n"],"sourceRoot":""}